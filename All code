// Blockchains

// Onjectif : Ecrire les fonctions permettant de gérer une blockchain simplifiée

/* On supose que:
- une transaction est une structure composée du code du vendeur, du code de l'acheteur, et de la valeur de la transaction
- un block de la blockchain contient une unique transaction
- les blocks contiennent aussi un champ code_block dont la valeur est calculée à partir des champs code_block du block précédent et valeur de la transaction du block
- les blocks contiennent aussi un pointeur sur le bloc précédent
- pour le bloc genesis (prmeier bloc), le code_block est initialisé à 17, tous les champs de transaction sont initialisés à 0, et le pointeur precedent pointe vers NULL

// Définition de la structure Transaction
typedef struct transaction
{
  int vendeur;
  int acheteur;
  float valeur;
} Transaction

// Définition de la structure Block
typedef struct block
{
  int long code_block;
  Transaction *trans;
  float valeur;
} Block

// QU1
// Ecrire la fonction permettant de créer et d'initialiser une transaction, et qui renvoie un pointeur vers la nouvelle transaction
// On suppose ici que vendeur, acheteur, et valeur ne valent pas NULL

Transaction* creation_transaction (int vendeur, int acheteur, float valeur) {
  Transaction* new_trans = (Transaction*)malloc(sizeof(Transaction));
  if (new_trans == NULL) {
    printf("Erreur dans l’allocation mémoire");
    return NULL;
  }
  new_trans->vendeur = vendeur;
  new_trans->acheteur = acheteur;
  new_trans->valeut = valeur;
  return new_trans;
}

// QU2
// Ecrire la fonction permettant de créer et d'initialiser le bloc genesis d'une blockchain, et qui renvoie un pointeur vers le block nouvellement créé

Block *creation_bloc_zero()
{
  Block* new_Block=(Block*)malloc(sizeof(Block));
  if (new_Block == NULL) {
    printf("Erreur dans l’allocation mémoire");
    return NULL;
  }
  new_Block->code_Block=17;
  new_Block->trans=creation_transaction(0,0,0);
  new_Block->precedent=NULL;
  return new_Block
}

// QU3
// Ecrire la fonction permettant de créer un nouveau code de block, calcul par f(x)=2*x*mod(8571),où x est la somme de code_block_precedent et la valeur de la transaction reçue en paramètre

long creation_code_block(long code_block_precedent, Transaction *trans)
{
  return (2*(code_block_precedent+trans->valeur))%8571;
}

// QU4
// Ecrire la fonction d'ajout d'un nouvel block à une blockchain dont la transaction est reçue en paramètre, et qui renvoie un pointeur vers la bouvelle blockchain

Block *ajout_nouveau_block(Block *blockcain, Transaction *nt)
{
  if (blockchain == NULL) {
    return creation_block_zero();
  }
  Block* new_Block=(Block*)malloc(sizeof(Block));
  if (new_Block == NULL) {
    printf("Erreur dans l’allocation mémoire");
    return NULL;
  }
  new_block->code_block=creation_code_block(blockchain->code_block,nt);
  new_block->trans=nt;
  new_block->precedent=blockchain;
  return new_block;
}

// QU5
// Ecrire la fonction permettant de calculer le bilan des transactions effectuées par une personne dont le code est donné en paramètre

float valeur_transactions_personne(Block *blockchain, int personne)
{
  float val=blockchain->trans->valeur;
  if blockchain->trans->vendeur==personne {
    return val-val_transactions_personne(blockchain->precedent, personne);
  }
  return val+val_transactions_personne(blockchain->precedent, personne);

// QU6
// Ecrire la fonction permettant de modifier la valeur d'une transaction identifiée par le block dont elle fait partie, et qui retourne un pointeur vers la nouvelle blockchain

Block *modification_blockchain(Block *blockcain, Block *a_modifier, float val)
{
  if (blockchain == NULL) || (blockchain->precedent==NULL) || (a_modifier==NULL){
    return NULL;
  }
  if blockchain==a_modifier {
    blockchain->trans->valeur=valeur;
    return blockhain;
  }
  modification_blockchain-blockchain->precedent, a_modifier, val);
  blockchain->code_block=creation_code_block(blockchain->precedent->code_block, blockchain->trans);
  return blockchain;
}

// QU7
// Ecrire une fonction permettant d'afficher les transactions d'une blockchain de la plus récente à la plus ancienne

void afficher_blockchain(Block* blockchain)
{
  if Blockchain==NULL
  {
    return NULL;
  }
  printf("transaction=%d,%d,%f",blockchain->trans->vendeur, blockchain->trans->acheteur, blockchain->trans->valeur);
  afficher_blockchain(blockchain->precedent);
  return;
}

// QU8
// Ecrure une fonction permettant de libérer la mémoire d'un blockchain

void liberer_memoire_blockchain(Block *blockchain)
{
  if Blockchain==NULL
  {
    return NULL;
  }
  liberer_memoire_blockchain(Block *blockchain->precedent);
  free(blockchain->precedent);
  free(blockchain);
  return;
}

// QU9
// Ecrire une fonction permettant d'effacer toutes les transactions du type "achat" d'une personne dont le code est donné en paramètre

void effacer(int acheteur, Block *courant)
{
  if courant==NULL {
    return;
  }
  if courant->trans->acheteur==acheteur {
    courant->trans->valeur=0;
  }
  if courant->precedent==NULL {
    courant->code_block=0;
  }
  effacer(acheteur,courant->precedent);
  if (courant->trans->acheteur!=acheteur) {
    courant->code_block=creation_code_block(courant->precedent->code_block,courant->trans);
  }
  return;
}
